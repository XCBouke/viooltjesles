@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Log in";

<<<<<<< HEAD
    var messagetext = "- Je moet ingelogd zijn om deze pagina te bekijken";
    var messagetext2 = "- Alleen voor Admins";
=======
    var messagetext = "Je moet ingelogd zijn om deze pagina te bekijken.";
>>>>>>> origin/master
    // Initialize general page variables
    var email = "";
    var password = "";
    var rememberMe = false;

    var returnUrl = Request.QueryString["ReturnUrl"];
    if (returnUrl.IsEmpty()) {
        // Some external login providers always require a return URL value
        returnUrl = Href("~/");
    }

    // Setup validation
<<<<<<< HEAD
    Validation.RequireField("email", "You must specify an email address.");
    Validation.Add("email", 
        Validator.Regex(@"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$", 
        "Invalid format for an email address")
        );
    Validation.RequireField("password", "You must specify a password.");
=======
    Validation.RequireField("email", "Voer een emailadres in.");
    Validation.RequireField("password", "Voer een wachtwoord in.");
>>>>>>> origin/master
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Wachtwoord moet tenminste 6 karakters lang zijn."));

    // If this is a POST request, validate and process data
    if (IsPost) {
        AntiForgery.Validate();
        // is this an external login request?
        string provider = Request.Form["provider"];
        if (!provider.IsEmpty()) {
            OAuthWebSecurity.RequestAuthentication(provider, Href("~/Account/RegisterService", new { returnUrl }));
            return;
        } else if (Validation.IsValid()) {
            email = Request.Form["email"];
            password = Request.Form["password"];
            rememberMe = Request.Form["rememberMe"].AsBool();

            if (WebSecurity.UserExists(email) && WebSecurity.GetPasswordFailuresSinceLastSuccess(email) > 4 && WebSecurity.GetLastPasswordFailureDate(email).AddSeconds(60) > DateTime.UtcNow) {
                Response.Redirect("~/Account/AccountLockedOut");
                return;
            }

            // Attempt to log in using provided credentials
            if (WebSecurity.Login(email, password, rememberMe)) {
                Context.RedirectLocal(returnUrl);
                return;
            } else {
                ModelState.AddFormError("Gebruikersnaam of wachtwoord verkeerd.");
            }
        }
    }
        if (Request.QueryString["message"] == "1"){
        <h4>@messagetext</h4>
    }
        if (Request.QueryString["message"] == "2"){
        <h4>@messagetext2</h4>
    }
}

<hgroup class="title">
    <h1>@Page.Title</h1>
</hgroup>


<section id="loginForm">

    
    <form method="post">
        @AntiForgery.GetHtml()
        @* If one or more validation errors exist, show an error *@
        @Html.ValidationSummary("Er is iets mis gegaan. Probeer het opnieuw.", excludeFieldErrors: true, htmlAttributes: null)

        <fieldset>
            <legend>Log in to Your Account</legend>
            <ol>
                <li class="email">
                    <label for="email" @if (!ModelState.IsValidField("email"))
                                       {<text>class="error-label"</text>}>Email adres</label>
                    <input type="text" id="email" name="email" value="@email" @Validation.For("email")/>
                    @* Write any user name validation errors to the page *@
                    @Html.ValidationMessage("email")
                </li>
                <li class="password">
                    <label for="password" id="passwordlabel" @if (!ModelState.IsValidField("password")) {<text>class="error-label"</text>}>Wachtwoord</label>
                    <input type="password" id="password" name="password" @Validation.For("password")/>
                    @* Write any password validation errors to the page *@
                    @Html.ValidationMessage("password")
                </li>
                
            </ol>
            <input type="submit" value="Log in" />
        </fieldset>
    </form>
    <p>
        <a href="~/Account/Register"> <span class="Registreer">Registreer</span></a>
        
    </p>
</section>

